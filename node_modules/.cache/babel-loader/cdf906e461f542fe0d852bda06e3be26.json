{"ast":null,"code":"import _toConsumableArray from \"/home/izo/projects/my-rails-api-react-todo/redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n//Reducer\nvar initialState = {\n  todoList: [],\n  isFetching: false\n};\nexport var TodoReducer = function TodoReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  //state ={ todoList: [] }\n  switch (action.type) {\n    case 'FETCH_TODOS':\n      return Object.assign({}, state, {\n        isFetching: true\n      });\n\n    case 'FETCH_TODOS_SUCCESS':\n      return Object.assign({}, state, {\n        isFetching: false,\n        todoList: [action.todos]\n      });\n\n    case \"ADD_TODO\":\n      {\n        // Newly added ToDo\n        // const new_todo = action.todo;\n        return {\n          todoList: [].concat(_toConsumableArray(state.todoList), [action.todo])\n        };\n      }\n\n    case \"UPDATE_TODO\":\n      {\n        var new_todoList = state.todoList.map(function (el, index) {\n          // console.log(\"action.update_todo\")\n          // console.log(action.update_todo)\n          return el.id === action.update_todo.id ? action.update_todo : el;\n        });\n        console.log(\"new_todoList\");\n        console.log(new_todoList);\n        return {\n          todoList: new_todoList\n        };\n      }\n\n    case \"RESET_TODO\":\n      {\n        return {\n          todoList: []\n        };\n      }\n\n    case \"REMOVE_TODO\":\n      {\n        console.log(state.todoList);\n\n        var _new_todoList = state.todoList.filter(function (el) {\n          return el.id !== action.del_id;\n        });\n\n        console.log(\"new_todoList\");\n        console.log(_new_todoList);\n        return {\n          todoList: _new_todoList\n        };\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/izo/projects/my-rails-api-react-todo/redux/src/TodoReducer.js"],"names":["initialState","todoList","isFetching","TodoReducer","state","action","type","Object","assign","todos","todo","new_todoList","map","el","index","id","update_todo","console","log","filter","del_id"],"mappings":";AAAA;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,UAAU,EAAE;AAFO,CAArB;AAKA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AAAC;AAC5D,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAK,aAAL;AACA,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BF,QAAAA,UAAU,EAAE;AADkB,OAAzB,CAAP;;AAGA,SAAK,qBAAL;AACA,aAAOK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BF,QAAAA,UAAU,EAAE,KADkB;AAE9BD,QAAAA,QAAQ,EAAE,CAACI,MAAM,CAACI,KAAR;AAFoB,OAAzB,CAAP;;AAKA,SAAK,UAAL;AAAiB;AACf;AACA;AACA,eAAO;AACLR,UAAAA,QAAQ,+BAAMG,KAAK,CAACH,QAAZ,IAAsBI,MAAM,CAACK,IAA7B;AADH,SAAP;AAGD;;AACD,SAAK,aAAL;AAAoB;AAClB,YAAIC,YAAY,GAAGP,KAAK,CAACH,QAAN,CAAeW,GAAf,CAAmB,UAACC,EAAD,EAAKC,KAAL,EAAe;AACnD;AACA;AACA,iBAAOD,EAAE,CAACE,EAAH,KAAUV,MAAM,CAACW,WAAP,CAAmBD,EAA7B,GAAkCV,MAAM,CAACW,WAAzC,GAAuDH,EAA9D;AACD,SAJkB,CAAnB;AAKAI,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AACA,eAAO;AACLV,UAAAA,QAAQ,EAAEU;AADL,SAAP;AAGD;;AACD,SAAK,YAAL;AAAmB;AACjB,eAAO;AACLV,UAAAA,QAAQ,EAAE;AADL,SAAP;AAGD;;AACD,SAAK,aAAL;AAAoB;AAClBgB,QAAAA,OAAO,CAACC,GAAR,CAAYd,KAAK,CAACH,QAAlB;;AACA,YAAIU,aAAY,GAAGP,KAAK,CAACH,QAAN,CAAekB,MAAf,CAAsB,UAAAN,EAAE;AAAA,iBAAIA,EAAE,CAACE,EAAH,KAAUV,MAAM,CAACe,MAArB;AAAA,SAAxB,CAAnB;;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYP,aAAZ;AAEA,eAAO;AACLV,UAAAA,QAAQ,EAAEU;AADL,SAAP;AAGD;;AACD;AACE,aAAOP,KAAP;AA/CJ;AAiDD,CAlDM","sourcesContent":["//Reducer\n\nconst initialState = {\n  todoList: [],\n  isFetching: false,\n};\n\nexport const TodoReducer = (state = initialState, action) => {//state ={ todoList: [] }\n  switch (action.type) {\n\n    case 'FETCH_TODOS':\n    return Object.assign({}, state, {\n      isFetching: true\n    });\n    case 'FETCH_TODOS_SUCCESS':\n    return Object.assign({}, state, {\n      isFetching: false,\n      todoList: [action.todos]\n    });\n\n    case \"ADD_TODO\": {\n      // Newly added ToDo\n      // const new_todo = action.todo;\n      return {\n        todoList: [...state.todoList, action.todo]\n      };\n    }\n    case \"UPDATE_TODO\": {\n      let new_todoList = state.todoList.map((el, index) => {\n        // console.log(\"action.update_todo\")\n        // console.log(action.update_todo)\n        return el.id === action.update_todo.id ? action.update_todo : el;\n      });\n      console.log(\"new_todoList\");\n      console.log(new_todoList);\n      return {\n        todoList: new_todoList\n      };\n    }\n    case \"RESET_TODO\": {\n      return {\n        todoList: []\n      };\n    }\n    case \"REMOVE_TODO\": {\n      console.log(state.todoList);\n      let new_todoList = state.todoList.filter(el => el.id !== action.del_id);\n      console.log(\"new_todoList\");\n      console.log(new_todoList);\n\n      return {\n        todoList: new_todoList\n      };\n    }\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}